// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

enum worksOnType{
  WEB @map("Web Development")
  MOBILE @map("Android / IOS Development")
  ML @map("Machine Learning")
  SECURITY @map("Cyber Security")
 CLOUD @map("Cloud")
}

enum tag{
ML  
ML_OPS  
DEEP_LEARNING  
REINFORCEMENT_LEARNING  
DATA_SCIENCE  
DATA_ENGINEERING  
RECOMMENDATION_SYSTEMS  
TIME_SERIES  
ANOMALY_DETECTION  
GENERATIVE_AI  
FRONTEND  
REACT  
ANGULAR  
VUE  
NEXT_JS  
SVELTE  
TAILWIND_CSS  
TYPE_SCRIPT  
UI_UX  
WEB3
BACKEND  
NODE_JS  
EXPRESS  
DJANGO  
FLASK  
SPRING_BOOT  
RUBY_ON_RAILS  
REST_API  
GRAPHQL  
GRPC  
MICRO_SERVICES  
FULLSTACK  
JAMSTACK  
SERVERLESS    
CLOUD  
AWS  
GCP  
AZURE  
TERRAFORM  
KUBERNETES  
DOCKER  
CI_CD  
CLOUD_SECURITY  
LOAD_BALANCING  
MONITORING    
DEVOPS  
MOBILE  
FLUTTER  
REACT_NATIVE  
KOTLIN  
SWIFT  
IOS  
ANDROID  
CROSS_PLATFORM  
DATABASE  
SQL  
NO_SQL  
MONGODB  
POSTGRESQL  
MYSQL  
BIGQUERY  
DATA_LAKES  
ETL  
SECURITY  
PENETRATION_TESTING  
VULNERABILITY_SCANNING  
IAM  
SOC  
ZERO_TRUST  
SIEM  
PKI  
NLP  
LLMS  
TEXT_CLASSIFICATION  
CHATBOTS  
SENTIMENT_ANALYSIS  
TRANSLATION  
SPEECH_RECOGNITION  
QUESTION_ANSWERING  
VISION  
OBJECT_DETECTION  
FACE_RECOGNITION  
OCR  
IMAGE_SEGMENTATION  
POSE_ESTIMATION  
VIDEO_ANALYTICS  
AGILE  
SCRUM  
PRODUCT_MANAGEMENT  
QA  
MANUAL_TESTING  
AUTOMATION_TESTING  
GAME_DEVELOPMENT  
BLOCKCHAIN  
IOT  
AR  
VR  
TECH_LEAD  
ENGINEERING_MANAGER  
SRE
}
enum job_type{
  HYBRID
  REMOTE 
  OnSite
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id Int  @id @default(autoincrement())
  name String
  username String  @unique
  password String
  email String  @unique
  experience String 
  looking_for tag[]
  newjob NewJob[]
  bookmark Bookmark[] 


}
model Job{
  jid Int @id @default(autoincrement())
  tags tag[]
  link String
  description String
  email String 
  experience String
  salary String
  level String
  title String
  responsibility String
  start_date DateTime
  last_date DateTime
  types job_type 
  requirements String
  location String
  cid Int
  website String
  company Company @relation(fields: [cid],references: [cid],onDelete: Cascade)
  newjob NewJob[]
  bookmark Bookmark[]

}
model Company{
  cid Int @id @default(autoincrement())
  name String @unique
  location String
  description String
  website String 
  workson tag[]
  jobs Job[]
}
model NewJob{
  njid Int @id @default(autoincrement())
  jid Int
  id Int
  user User @relation(fields: [id],references: [id],onDelete: Cascade)
  job Job @relation(fields: [jid],references: [jid],onDelete: Cascade)
  @@unique([jid,id])
}

model Bookmark{
  mark Int @id @default(autoincrement())
  jid Int
  id Int
  user User @relation(fields: [id],references: [id],onDelete: Cascade)
  job Job @relation(fields: [jid],references: [jid],onDelete: Cascade)
  @@unique([jid,id])
}